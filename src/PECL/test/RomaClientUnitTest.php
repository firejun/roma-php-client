<?php
require_once 'PHPUnit/Framework.php';
require_once 'RomaClient.php';

/**
 * Test class for RomaClient.
 * Generated by PHPUnit on 2010-08-05 at 16:37:31.
 */
class RomaClientUnitTest extends PHPUnit_Framework_TestCase
{
  public $nodes;

  /* public function __construct($arg) { */
  /*   $this->nodes = $arg; */
  /* } */

  protected $roma_client;

  protected static $VALID_KEY = "ValidKey";
  protected static $VALID_VAL = "ValidValue";
  protected static $VALID_ALIST_KEY = "ValidAKey";
  protected static $VALID_ALIST_VAL = "ValidAValue";
  /**
   * Sets up the fixture, for example, opens a network connection.
   * This method is called before a test is executed.
   *
   * @access protected
   */
  protected function setUp(){
    $this->roma_client = RomaClient::getInstance($this->nodes);
  }
  /**
   * Tears down the fixture, for example, closes a network connection.
   * This method is called after a test is executed.
   *
   * @access protected
   */
  protected function tearDown(){
      
  }

  /**
   * No.1
   * No.2
   */
  public function testGetInstance(){
    print "\n***TEST*** ". get_class($this) ."::". __FUNCTION__ . "\n";
    $this->assertType(RomaClient,$this->roma_client);
  }

  /**
   * No.3
   * No.18
   */
  public function testSetDefaultTimeout(){
    print "\n***TEST*** ". get_class($this) ."::". __FUNCTION__ . "\n";
    $b1 = time();
    try {
      $this->roma_client->get("TO_");
      $this->assertTrue(false,"should throw!");
    } catch (PHPUnit_Framework_AssertionFailedError $e) {
      throw $e;
    } catch (Exception $e) {
    }
    $a1 = time();
    $this->assertEquals(2,($a1-$b1));
    $this->roma_client->set_default_timeout(5000);
    $b2 = time();
    try {
      $this->roma_client->get("TO_");
      $this->assertTrue(false,"should throw!");
    } catch (PHPUnit_Framework_AssertionFailedError $e) {
      throw $e;
    } catch (Exception $e) {
    }
    $a2 = time();
    $this->assertEquals(5,($a2-$b2));
  }

  /**
   * No.4
   * No.19
   */
  public function testSet() {
    print "\n***TEST*** ". get_class($this) ."::". __FUNCTION__ . "\n";
    $ret = $this->roma_client->set("CMD_STORED", "bar", 0);
    $this->assertTrue($ret);
  }

  /**
   * No.5
   * No.20
   */
  public function testSetNotStored() {
    print "\n***TEST*** ". get_class($this) ."::". __FUNCTION__ . "\n";
    $ret = $this->roma_client->set("CMD_NOT_STORED", "bar", 0);
    $this->assertFalse($ret);
  }

  /**
   * No.6
   * No.21
   */
  public function testGet(){
    print "\n***TEST*** ". get_class($this) ."::". __FUNCTION__ . "\n";
    $val = $this->roma_client->get("CMD_VALUE");
    $this->assertEquals("FOOBAR",$val);
  }

  /**
   * No.7
   * No.22
   */
  public function testGetNull(){
    print "\n***TEST*** ". get_class($this) ."::". __FUNCTION__ . "\n";
    $val = $this->roma_client->get("CMD_NULL");
    $this->assertEquals(NULL,$val);
  }

  /**
   * No.8
   * No.23
   */
  public function testAlistSizedInsert() {
    print "\n***TEST*** ". get_class($this) ."::". __FUNCTION__ . "\n";
    $ret = $this->roma_client->alist_sized_insert("CMD_STORED",10,"alist-value");
    $this->assertTrue($ret);
  }

  /**
   * No.9
   * No.24
   */
  public function testAlistSizedInsertNotStored()
  {
    print "\n***TEST*** ". get_class($this) ."::". __FUNCTION__ . "\n";
    $ret = $this->roma_client->alist_sized_insert("CMD_NOT_STORED",10,"alist-value");
    $this->assertFalse($ret);
  }

  /**
   * No.10
   * No.25
   */
  public function testAlistJoin()
  {
    print "\n***TEST*** ". get_class($this) ."::". __FUNCTION__ . "\n";
    $val = $this->roma_client->alist_join("CMD_VALUE",",");
    $this->assertEquals(array("FOO", "BAR", "BAZ"),$val);
  }

  /**
   * No.11
   * No.26
   */
  public function testAlistJoinNull()
  {
    print "\n***TEST*** ". get_class($this) ."::". __FUNCTION__ . "\n";
    $val = $this->roma_client->alist_join("CMD_NULL",",");
    $this->assertEquals(NULL,$val);
  }

  /**
   * No.12
   * No.27
   */
  public function testAlistDelete()
  {
    print "\n***TEST*** ". get_class($this) ."::". __FUNCTION__ . "\n";
    $ret = $this->roma_client->alist_delete("CMD_DELETED", "alist-delete-value");
    $this->assertTrue($ret);
  }

  /**
   * No.13
   * No.28
   */
  public function testAlistDeleteNotDeleted()
  {
    print "\n***TEST*** ". get_class($this) ."::". __FUNCTION__ . "\n";
    $ret = $this->roma_client->alist_delete("CMD_NOT_DELETED", "alist-delete-value");
    $this->assertFalse($ret);
  }

  /**
   * No.14
   * No.29
   */
  public function testAlistDeleteAt()
  {
    print "\n***TEST*** ". get_class($this) ."::". __FUNCTION__ . "\n";
    $ret = $this->roma_client->alist_delete_at("CMD_DELETED",0);
    $this->assertTrue($ret);
  }

  /**
   * No.15
   * No.30
   */
  public function testAlistDeleteAtNotDeleted()
  {
    print "\n***TEST*** ". get_class($this) ."::". __FUNCTION__ . "\n";
    $ret = $this->roma_client->alist_delete_at("CMD_NOT_DELETED",0);
    $this->assertFalse($ret);
  }

  /**
   * No.16
   * No.31
   */
  public function testDelete()
  {
    print "\n***TEST*** ". get_class($this) ."::". __FUNCTION__ . "\n";
    $ret = $this->roma_client->delete("CMD_DELETED", 0);
    $this->assertTrue($ret);
  }

  /**
   * No.17
   * No.32
   */
  public function testDeleteNotDeleted()
  {
    print "\n***TEST*** ". get_class($this) ."::". __FUNCTION__ . "\n";
    $ret = $this->roma_client->delete("CMD_NOT_DELETED", 0);
    $this->assertFalse($ret);
  }

  /**
   * No.18
   * No.
   */
  public function testAdd()
  {
    print "\n***TEST*** ". get_class($this) ."::". __FUNCTION__ . "\n";
    $ret = $this->roma_client->add("CMD_STORED", "bar", 0);
    $this->assertTrue($ret);
  }

  /**
   * No.19
   * No.
   */
  public function testAddNotStored()
  {
    print "\n***TEST*** ". get_class($this) ."::". __FUNCTION__ . "\n";
    $ret = $this->roma_client->add("CMD_NOT_STORED", "bar", 0);
    $this->assertFalse($ret);
  }

  /**
   * No.20
   * No.
   */
  public function testAddNotFound()
  {
    print "\n***TEST*** ". get_class($this) ."::". __FUNCTION__ . "\n";
    $ret = $this->roma_client->add("CMD_NOT_FOUND", "bar", 0);
    $this->assertTrue($ret);
  }

  /**
   * No.21
   * No.
   */
  public function testReplace()
  {
    print "\n***TEST*** ". get_class($this) ."::". __FUNCTION__ . "\n";
    $ret = $this->roma_client->replace("CMD_STORED", "bar", 0);
    $this->assertTrue($ret);
  }

  /**
   * No.22
   * No.
   */
  public function testReplaceNotStored()
  {
    print "\n***TEST*** ". get_class($this) ."::". __FUNCTION__ . "\n";
    $ret = $this->roma_client->replace("CMD_NOT_STORED", "bar", 0);
    $this->assertFalse($ret);
  }

  /**
   * No.23
   * No.
   */
  public function testReplaceNotFound()
  {
    print "\n***TEST*** ". get_class($this) ."::". __FUNCTION__ . "\n";
    $ret = $this->roma_client->replace("CMD_NOT_FOUND", "bar", 0);
    $this->assertTrue($ret);
  }

  /**
   * No.24
   * No.
   */
  public function testAppend()
  {
    print "\n***TEST*** ". get_class($this) ."::". __FUNCTION__ . "\n";
    $ret = $this->roma_client->append("CMD_STORED", "bar", 0);
    $this->assertTrue($ret);
  }

  /**
   * No.25
   * No.
   */
  public function testAppendNotStored()
  {
    print "\n***TEST*** ". get_class($this) ."::". __FUNCTION__ . "\n";
    $ret = $this->roma_client->append("CMD_NOT_STORED", "bar", 0);
    $this->assertFalse($ret);
  }

  /**
   * No.26
   * No.
   */
  public function testAppendNotFound()
  {
    print "\n***TEST*** ". get_class($this) ."::". __FUNCTION__ . "\n";
    $ret = $this->roma_client->append("CMD_NOT_FOUND", "bar", 0);
    $this->assertTrue($ret);
  }

  /**
   * No.27
   * No.
   */
  public function testPrepend()
  {
    print "\n***TEST*** ". get_class($this) ."::". __FUNCTION__ . "\n";
    $ret = $this->roma_client->prepend("CMD_STORED", "bar", 0);
    $this->assertTrue($ret);
  }

  /**
   * No.28
   * No.
   */
  public function testPrependNotStored()
  {
    print "\n***TEST*** ". get_class($this) ."::". __FUNCTION__ . "\n";
    $ret = $this->roma_client->prepend("CMD_NOT_STORED", "bar", 0);
    $this->assertFalse($ret);
  }

  /**
   * No.29
   * No.
   */
  public function testPrependNotFound()
  {
    print "\n***TEST*** ". get_class($this) ."::". __FUNCTION__ . "\n";
    $ret = $this->roma_client->prepend("CMD_NOT_FOUND", "bar", 0);
    $this->assertTrue($ret);
  }

  /**
   * No.30
   * No.
   */
  public function testCas()
  {
    print "\n***TEST*** ". get_class($this) ."::". __FUNCTION__ . "\n";
    $ret = $this->roma_client->cas("CMD_STORED", "bar", 0, 0);
    $this->assertTrue($ret);
  }

  /**
   * No.31
   * No.
   */
  public function testCasNotStored()
  {
    print "\n***TEST*** ". get_class($this) ."::". __FUNCTION__ . "\n";
    $ret = $this->roma_client->cas("CMD_NOT_STORED", "bar", 0, 0);
    $this->assertFalse($ret);
  }

  /**
   * No.32
   * No.
   */
  public function testCasNotFound()
  {
    print "\n***TEST*** ". get_class($this) ."::". __FUNCTION__ . "\n";
    $ret = $this->roma_client->cas("CMD_NOT_FOUND", "bar", 0, 0);
    $this->assertFalse($ret);
  }

  /**
   * No.33
   * No.
   */
  public function testCasExists()
  {
    print "\n***TEST*** ". get_class($this) ."::". __FUNCTION__ . "\n";
    $ret = $this->roma_client->cas("CMD_EXISTS", "bar", 0, 0);
    $this->assertFalse($ret);
  }

  /**
   * No.34
   * No.
   */
  public function testIncr()
  {
    print "\n***TEST*** ". get_class($this) ."::". __FUNCTION__ . "\n";
    $val = $this->roma_client->incr("CMD_", 1);
    $this->assertEquals(10, $val);
  }

  /**
   * No.35
   * No.
   */
  public function testIncrNotFound()
  {
    print "\n***TEST*** ". get_class($this) ."::". __FUNCTION__ . "\n";
    $val = $this->roma_client->incr("CMD_NOT_FOUND", 1);
    $this->assertEquals(-1, $val);
  }

  /**
   * No.36
   * No.
   */
  public function testDecr()
  {
    print "\n***TEST*** ". get_class($this) ."::". __FUNCTION__ . "\n";
    $val = $this->roma_client->decr("CMD_", 1);
    $this->assertEquals(10, $val);
  }

  /**
   * No.37
   * No.
   */
  public function testDecrNotFound()
  {
    print "\n***TEST*** ". get_class($this) ."::". __FUNCTION__ . "\n";
    $val = $this->roma_client->decr("CMD_NOT_FOUND", 1);
    $this->assertEquals(-1, $val);
  }

  /**
   * No.38
   * No.
   */
  public function testGets()
  {
    print "\n***TEST*** ". get_class($this) ."::". __FUNCTION__ . "\n";
    $val = $this->roma_client->gets("CMD_");
    $this->assertEquals(2, $val);
  }

  /**
   * No.39
   * No.
   */
  public function testGetsNull()
  {
    print "\n***TEST*** ". get_class($this) ."::". __FUNCTION__ . "\n";
    $val = $this->roma_client->gets("CMD_NULL");
    $this->assertEquals(-1, $val);
  }

  /**
   * No.40
   * No.
   */
  public function testAlistClear()
  {
    print "\n***TEST*** ". get_class($this) ."::". __FUNCTION__ . "\n";
    $ret = $this->roma_client->alist_clear("CMD_CLEARED");
    $this->assertTrue($ret);
  }

  /**
   * No.41
   * No.
   */
  public function testAlistClearNotFound()
  {
    print "\n***TEST*** ". get_class($this) ."::". __FUNCTION__ . "\n";
    $ret = $this->roma_client->alist_clear("CMD_NOT_FOUND");
    $this->assertFalse($ret);
  }

  /**
   * No.42
   * No.
   */
  public function testAlistClearNotCleared()
  {
    print "\n***TEST*** ". get_class($this) ."::". __FUNCTION__ . "\n";
    $ret = $this->roma_client->alist_clear("CMD_NOT_CLEARED");
    $this->assertFalse($ret);
  }

  /**
   * No.43
   * No.
   */
  public function testAlistLength()
  {
    print "\n***TEST*** ". get_class($this) ."::". __FUNCTION__ . "\n";
    $val = $this->roma_client->alist_length("CMD_");
    $this->assertEquals(10, $val);
  }

  /**
   * No.44
   * No.
   */
  public function testAlistLengthNotFound()
  {
    print "\n***TEST*** ". get_class($this) ."::". __FUNCTION__ . "\n";
    $ret = $this->roma_client->alist_length("CMD_NOT_FOUND");
    $this->assertFalse($ret);
  }

  /**
   * No.45
   * No.
   */
  public function testAlistUpdateAt()
  {
    print "\n***TEST*** ". get_class($this) ."::". __FUNCTION__ . "\n";
    $ret = $this->roma_client->alist_update_at("CMD_STORED", 0, "bar");
    $this->assertTrue($ret);
  }

  /**
   * No.46
   * No.
   */
  public function testAlistUpdateAtNotStored()
  {
    print "\n***TEST*** ". get_class($this) ."::". __FUNCTION__ . "\n";
    $ret = $this->roma_client->alist_update_at("CMD_NOT_STORED", 0, "bar");
    $this->assertFalse($ret);
  }

  /**
   * No.47
   * No.
   */
  public function testAlistUpdateAtNotFound()
  {
    print "\n***TEST*** ". get_class($this) ."::". __FUNCTION__ . "\n";
    $ret = $this->roma_client->alist_update_at("CMD_NOT_FOUND", 0, "bar");
    $this->assertFalse($ret);
  }
}
?>
