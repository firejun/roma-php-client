<?php
require_once 'RomaClient.php';

/**
 * Test class for RomaClient.
 * Generated by PHPUnit on 2010-08-05 at 16:37:31.
 */
class RomaClientUnitTest extends PHPUnit_Framework_TestCase
{
  public $nodes;
  public $illegal_nodes;

  /* public function __construct($arg) { */
  /*   $this->nodes = $arg; */
  /* } */

  protected $roma_client;

  protected static $VALID_KEY = "ValidKey";
  protected static $VALID_VAL = "ValidValue";
  protected static $VALID_ALIST_KEY = "ValidAKey";
  protected static $VALID_ALIST_VAL = "ValidAValue";
  /**
   * Sets up the fixture, for example, opens a network connection.
   * This method is called before a test is executed.
   *
   * @access protected
   */
  protected function setUp(){
    $this->roma_client = RomaClient::getInstance($this->nodes);
  }
  /**
   * Tears down the fixture, for example, closes a network connection.
   * This method is called after a test is executed.
   *
   * @access protected
   */
  protected function tearDown(){
      
  }

  /**
   * No.1
   */
  public function testGetInstance(){
    print "\n***TEST*** ". get_class($this) ."::". __FUNCTION__ . "\n";
    $this->assertInstanceOf(RomaClient,$this->roma_client);
  }

  /**
   * No.2
   */
  public function testGetInstanceNoExists(){
    print "\n***TEST*** ". get_class($this) ."::". __FUNCTION__ . "\n";
    $ret = $this->roma_client->getInstance($this->illegal_nodes);
    $this->assertFalse($ret);
  }

  /**
   * No.3
   * No.
   */
  public function testSetDefaultTimeout(){
    print "\n***TEST*** ". get_class($this) ."::". __FUNCTION__ . "\n";
    $b1 = time();
    try {
      $this->roma_client->get("TO_");
      $this->assertTrue(false,"should throw!");
    } catch (PHPUnit_Framework_AssertionFailedError $e) {
      throw $e;
    } catch (Exception $e) {
    }
    $a1 = time();
    $this->assertEquals(2,($a1-$b1));
    $this->roma_client->set_default_timeout(5000);
    $b2 = time();
    try {
      $this->roma_client->get("TO_");
      $this->assertTrue(false,"should throw!");
    } catch (PHPUnit_Framework_AssertionFailedError $e) {
      throw $e;
    } catch (Exception $e) {
    }
    $a2 = time();
    $this->assertEquals(5,($a2-$b2));
  }

  /**
   * No.4
   * No.
   */
  public function testSet() {
    print "\n***TEST*** ". get_class($this) ."::". __FUNCTION__ . "\n";
    $ret = $this->roma_client->set("CMD_STORED", "bar", 0);
    $this->assertTrue($ret);
  }

  /**
   * No.5
   * No.
   */
  public function testSetNotStored() {
    print "\n***TEST*** ". get_class($this) ."::". __FUNCTION__ . "\n";
    $ret = $this->roma_client->set("CMD_NOT_STORED", "bar", 0);
    $this->assertFalse($ret);
  }

  /**
   * No.6
   * No.
   */
  public function testGet(){
    print "\n***TEST*** ". get_class($this) ."::". __FUNCTION__ . "\n";
    $val = $this->roma_client->get("CMD_VALUE");
    $this->assertEquals("FOOBAR",$val);
  }

  /**
   * No.7
   * No.
   */
  public function testGetNull(){
    print "\n***TEST*** ". get_class($this) ."::". __FUNCTION__ . "\n";
    $val = $this->roma_client->get("CMD_NULL");
    $this->assertEquals(NULL,$val);
  }

  /**
   * No.8
   * No.
   */
  public function testAlistSizedInsert() {
    print "\n***TEST*** ". get_class($this) ."::". __FUNCTION__ . "\n";
    $ret = $this->roma_client->alist_sized_insert("CMD_STORED",10,"alist-value");
    $this->assertTrue($ret);
  }

  /**
   * No.9
   * No.
   */
  public function testAlistSizedInsertNotStored()
  {
    print "\n***TEST*** ". get_class($this) ."::". __FUNCTION__ . "\n";
    $ret = $this->roma_client->alist_sized_insert("CMD_NOT_STORED",10,"alist-value");
    $this->assertFalse($ret);
  }

  /**
   * No.10
   * No.
   */
  public function testAlistJoin()
  {
    print "\n***TEST*** ". get_class($this) ."::". __FUNCTION__ . "\n";
    $val = $this->roma_client->alist_join("CMD_VALUE",",");
    $this->assertEquals(array("FOO", "BAR", "BAZ"),$val);
  }

  /**
   * No.11
   * No.
   */
  public function testAlistJoinNull()
  {
    print "\n***TEST*** ". get_class($this) ."::". __FUNCTION__ . "\n";
    $val = $this->roma_client->alist_join("CMD_NULL",",");
    $this->assertEquals(NULL,$val);
  }

  /**
   * No.12
   * No.
   */
  public function testAlistDelete()
  {
    print "\n***TEST*** ". get_class($this) ."::". __FUNCTION__ . "\n";
    $ret = $this->roma_client->alist_delete("CMD_DELETED", "alist-delete-value");
    $this->assertTrue($ret);
  }

  /**
   * No.13
   * No.
   */
  public function testAlistDeleteNotDeleted()
  {
    print "\n***TEST*** ". get_class($this) ."::". __FUNCTION__ . "\n";
    $ret = $this->roma_client->alist_delete("CMD_NOT_DELETED", "alist-delete-value");
    $this->assertFalse($ret);
  }

  /**
   * No.14
   * No.
   */
  public function testAlistDeleteAt()
  {
    print "\n***TEST*** ". get_class($this) ."::". __FUNCTION__ . "\n";
    $ret = $this->roma_client->alist_delete_at("CMD_DELETED",0);
    $this->assertTrue($ret);
  }

  /**
   * No.15
   * No.
   */
  public function testAlistDeleteAtNotDeleted()
  {
    print "\n***TEST*** ". get_class($this) ."::". __FUNCTION__ . "\n";
    $ret = $this->roma_client->alist_delete_at("CMD_NOT_DELETED",0);
    $this->assertFalse($ret);
  }

  /**
   * No.16
   * No.
   */
  public function testDelete()
  {
    print "\n***TEST*** ". get_class($this) ."::". __FUNCTION__ . "\n";
    $ret = $this->roma_client->delete("CMD_DELETED", 0);
    $this->assertTrue($ret);
  }

  /**
   * No.17
   * No.
   */
  public function testDeleteNotDeleted()
  {
    print "\n***TEST*** ". get_class($this) ."::". __FUNCTION__ . "\n";
    $ret = $this->roma_client->delete("CMD_NOT_DELETED", 0);
    $this->assertFalse($ret);
  }

  /**
   * No.18
   * No.
   */
  public function testAdd()
  {
    print "\n***TEST*** ". get_class($this) ."::". __FUNCTION__ . "\n";
    $ret = $this->roma_client->add("CMD_STORED", "bar", 0);
    $this->assertTrue($ret);
  }

  /**
   * No.19
   * No.
   */
  public function testAddNotStored()
  {
    print "\n***TEST*** ". get_class($this) ."::". __FUNCTION__ . "\n";
    $ret = $this->roma_client->add("CMD_NOT_STORED", "bar", 0);
    $this->assertFalse($ret);
  }

  /**
   * No.20
   * No.
   */
  public function testAddNotFound()
  {
    print "\n***TEST*** ". get_class($this) ."::". __FUNCTION__ . "\n";
    $ret = $this->roma_client->add("CMD_NOT_FOUND", "bar", 0);
    $this->assertTrue($ret);
  }

  /**
   * No.21
   * No.
   */
  public function testReplace()
  {
    print "\n***TEST*** ". get_class($this) ."::". __FUNCTION__ . "\n";
    $ret = $this->roma_client->replace("CMD_STORED", "bar", 0);
    $this->assertTrue($ret);
  }

  /**
   * No.22
   * No.
   */
  public function testReplaceNotStored()
  {
    print "\n***TEST*** ". get_class($this) ."::". __FUNCTION__ . "\n";
    $ret = $this->roma_client->replace("CMD_NOT_STORED", "bar", 0);
    $this->assertFalse($ret);
  }

  /**
   * No.23
   * No.
   */
  public function testReplaceNotFound()
  {
    print "\n***TEST*** ". get_class($this) ."::". __FUNCTION__ . "\n";
    $ret = $this->roma_client->replace("CMD_NOT_FOUND", "bar", 0);
    $this->assertTrue($ret);
  }

  /**
   * No.24
   * No.
   */
  public function testAppend()
  {
    print "\n***TEST*** ". get_class($this) ."::". __FUNCTION__ . "\n";
    $ret = $this->roma_client->append("CMD_STORED", "bar", 0);
    $this->assertTrue($ret);
  }

  /**
   * No.25
   * No.
   */
  public function testAppendNotStored()
  {
    print "\n***TEST*** ". get_class($this) ."::". __FUNCTION__ . "\n";
    $ret = $this->roma_client->append("CMD_NOT_STORED", "bar", 0);
    $this->assertFalse($ret);
  }

  /**
   * No.26
   * No.
   */
  public function testAppendNotFound()
  {
    print "\n***TEST*** ". get_class($this) ."::". __FUNCTION__ . "\n";
    $ret = $this->roma_client->append("CMD_NOT_FOUND", "bar", 0);
    $this->assertTrue($ret);
  }

  /**
   * No.27
   * No.
   */
  public function testPrepend()
  {
    print "\n***TEST*** ". get_class($this) ."::". __FUNCTION__ . "\n";
    $ret = $this->roma_client->prepend("CMD_STORED", "bar", 0);
    $this->assertTrue($ret);
  }

  /**
   * No.28
   * No.
   */
  public function testPrependNotStored()
  {
    print "\n***TEST*** ". get_class($this) ."::". __FUNCTION__ . "\n";
    $ret = $this->roma_client->prepend("CMD_NOT_STORED", "bar", 0);
    $this->assertFalse($ret);
  }

  /**
   * No.29
   * No.
   */
  public function testPrependNotFound()
  {
    print "\n***TEST*** ". get_class($this) ."::". __FUNCTION__ . "\n";
    $ret = $this->roma_client->prepend("CMD_NOT_FOUND", "bar", 0);
    $this->assertTrue($ret);
  }

  /**
   * No.30
   * No.
   */
  public function testCas()
  {
    print "\n***TEST*** ". get_class($this) ."::". __FUNCTION__ . "\n";
    $ret = $this->roma_client->cas("CMD_STORED", "bar", 0, 0);
    $this->assertTrue($ret);
  }

  /**
   * No.31
   * No.
   */
  public function testCasNotStored()
  {
    print "\n***TEST*** ". get_class($this) ."::". __FUNCTION__ . "\n";
    $ret = $this->roma_client->cas("CMD_NOT_STORED", "bar", 0, 0);
    $this->assertFalse($ret);
  }

  /**
   * No.32
   * No.
   */
  public function testCasNotFound()
  {
    print "\n***TEST*** ". get_class($this) ."::". __FUNCTION__ . "\n";
    $ret = $this->roma_client->cas("CMD_NOT_FOUND", "bar", 0, 0);
    $this->assertFalse($ret);
  }

  /**
   * No.33
   * No.
   */
  public function testCasExists()
  {
    print "\n***TEST*** ". get_class($this) ."::". __FUNCTION__ . "\n";
    $ret = $this->roma_client->cas("CMD_EXISTS", "bar", 0, 0);
    $this->assertFalse($ret);
  }

  /**
   * No.34
   * No.
   */
  public function testIncr()
  {
    print "\n***TEST*** ". get_class($this) ."::". __FUNCTION__ . "\n";
    $val = $this->roma_client->incr("CMD_", 1);
    $this->assertEquals(10, $val);
  }

  /**
   * No.35
   * No.
   */
  public function testIncrNotFound()
  {
    print "\n***TEST*** ". get_class($this) ."::". __FUNCTION__ . "\n";
    $val = $this->roma_client->incr("CMD_NOT_FOUND", 1);
    $this->assertEquals(-1, $val);
  }

  /**
   * No.36
   * No.
   */
  public function testDecr()
  {
    print "\n***TEST*** ". get_class($this) ."::". __FUNCTION__ . "\n";
    $val = $this->roma_client->decr("CMD_", 1);
    $this->assertEquals(10, $val);
  }

  /**
   * No.37
   * No.
   */
  public function testDecrNotFound()
  {
    print "\n***TEST*** ". get_class($this) ."::". __FUNCTION__ . "\n";
    $val = $this->roma_client->decr("CMD_NOT_FOUND", 1);
    $this->assertEquals(-1, $val);
  }

  /**
   * No.38
   * No.
   */
  public function testCasUnique()
  {
    print "\n***TEST*** ". get_class($this) ."::". __FUNCTION__ . "\n";
    $val = $this->roma_client->cas_unique("CMD_");
    $this->assertEquals(array(2, "FOOBAR"), $val);
  }

  /**
   * No.39
   * No.
   */
  public function testCasUniqueNull()
  {
    print "\n***TEST*** ". get_class($this) ."::". __FUNCTION__ . "\n";
    $val = $this->roma_client->cas_unique("CMD_NULL");
    $this->assertEquals(array(-1,NULL), $val);
  }

  /**
   * No.40
   * No.
   */
  public function testAlistClear()
  {
    print "\n***TEST*** ". get_class($this) ."::". __FUNCTION__ . "\n";
    $ret = $this->roma_client->alist_clear("CMD_CLEARED");
    $this->assertTrue($ret);
  }

  /**
   * No.41
   * No.
   */
  public function testAlistClearNotFound()
  {
    print "\n***TEST*** ". get_class($this) ."::". __FUNCTION__ . "\n";
    $ret = $this->roma_client->alist_clear("CMD_NOT_FOUND");
    $this->assertFalse($ret);
  }

  /**
   * No.42
   * No.
   */
  public function testAlistClearNotCleared()
  {
    print "\n***TEST*** ". get_class($this) ."::". __FUNCTION__ . "\n";
    $ret = $this->roma_client->alist_clear("CMD_NOT_CLEARED");
    $this->assertFalse($ret);
  }

  /**
   * No.43
   * No.
   */
  public function testAlistLength()
  {
    print "\n***TEST*** ". get_class($this) ."::". __FUNCTION__ . "\n";
    $val = $this->roma_client->alist_length("CMD_");
    $this->assertEquals(10, $val);
  }

  /**
   * No.44
   * No.
   */
  public function testAlistLengthNotFound()
  {
    print "\n***TEST*** ". get_class($this) ."::". __FUNCTION__ . "\n";
    $ret = $this->roma_client->alist_length("CMD_NOT_FOUND");
    $this->assertFalse($ret);
  }

  /**
   * No.45
   * No.
   */
  public function testAlistUpdateAt()
  {
    print "\n***TEST*** ". get_class($this) ."::". __FUNCTION__ . "\n";
    $ret = $this->roma_client->alist_update_at("CMD_STORED", 0, "bar");
    $this->assertTrue($ret);
  }

  /**
   * No.46
   * No.
   */
  public function testAlistUpdateAtNotStored()
  {
    print "\n***TEST*** ". get_class($this) ."::". __FUNCTION__ . "\n";
    $ret = $this->roma_client->alist_update_at("CMD_NOT_STORED", 0, "bar");
    $this->assertFalse($ret);
  }

  /**
   * No.47
   * No.
   */
  public function testAlistUpdateAtNotFound()
  {
    print "\n***TEST*** ". get_class($this) ."::". __FUNCTION__ . "\n";
    $ret = $this->roma_client->alist_update_at("CMD_NOT_FOUND", 0, "bar");
    $this->assertFalse($ret);
  }

  /**
   * No.48
   * No.
   */
  public function testSetError()
  {
    print "\n***TEST*** ". get_class($this) ."::". __FUNCTION__ . "\n";
    try {
      $ret = $this->roma_client->set("CMD_ERROR", "bar", 0);
      $this->fail('set() test failure');
    } catch (Exception $e) {
    }
    $this->assertEquals("rmc_set() failure", $e->getMessage());
  }

  /**
   * No.49
   * No.
   */
  public function testGetError()
  {
    print "\n***TEST*** ". get_class($this) ."::". __FUNCTION__ . "\n";
    try {
      $ret = $this->roma_client->get("CMD_ERROR");
      $this->fail('get() test failure');
    } catch (Exception $e) {
    }
    $this->assertEquals("rmc_get() failure", $e->getMessage());
  }

  /**
   * No.50
   * No.
   */
  public function testAlistSizedInsertError()
  {
    print "\n***TEST*** ". get_class($this) ."::". __FUNCTION__ . "\n";
    try {
      $ret = $this->roma_client->alist_sized_insert("CMD_ERROR", 10, "alist-value");
      $this->fail('alist_sized_insert() test failure');
    } catch (Exception $e) {
    }
    $this->assertEquals("rmc_alist_sized_insert() failure", $e->getMessage());
  }

  /**
   * No.51
   * No.
   */
  public function testAlistJoinError()
  {
    print "\n***TEST*** ". get_class($this) ."::". __FUNCTION__ . "\n";
    try {
      $ret = $this->roma_client->alist_join("CMD_ERROR", ",");
      $this->fail('alist_join() test failure');
    } catch (Exception $e) {
    }
    $this->assertEquals("rmc_alist_join() failure", $e->getMessage());
  }

  /**
   * No.52
   * No.
   */
  public function testAlistDeleteError()
  {
    print "\n***TEST*** ". get_class($this) ."::". __FUNCTION__ . "\n";
    try {
      $ret = $this->roma_client->alist_delete("CMD_ERROR", "alist-delete-value");
      $this->fail('alist_delete() test failure');
    } catch (Exception $e) {
    }
    $this->assertEquals("rmc_alist_delete() failure", $e->getMessage());
  }

  /**
   * No.53
   * No.
   */
  public function testAlistDeleteAtError()
  {
    print "\n***TEST*** ". get_class($this) ."::". __FUNCTION__ . "\n";
    try {
      $ret = $this->roma_client->alist_delete_at("CMD_ERROR", 0);
      $this->fail('alist_delete_at() test failure');
    } catch (Exception $e) {
    }
    $this->assertEquals("rmc_alist_delete_at() failure", $e->getMessage());
  }

  /**
   * No.54
   * No.
   */
  public function testDeleteError()
  {
    print "\n***TEST*** ". get_class($this) ."::". __FUNCTION__ . "\n";
    try {
      $ret = $this->roma_client->delete("CMD_ERROR", 0);
      $this->fail('delete() test failure');
    } catch (Exception $e) {
    }
    $this->assertEquals("rmc_delete() failure", $e->getMessage());
  }

  /**
   * No.55
   * No.
   */
  public function testAddError()
  {
    print "\n***TEST*** ". get_class($this) ."::". __FUNCTION__ . "\n";
    try {
      $ret = $this->roma_client->add("CMD_ERROR", "bar", 0);
      $this->fail('add() test failure');
    } catch (Exception $e) {
    }
    $this->assertEquals("rmc_add() failure", $e->getMessage());
  }

  /**
   * No.56
   * No.
   */
  public function testReplaceError()
  {
    print "\n***TEST*** ". get_class($this) ."::". __FUNCTION__ . "\n";
    try {
      $ret = $this->roma_client->replace("CMD_ERROR", "bar", 0);
      $this->fail('replace() test failure');
    } catch (Exception $e) {
    }
    $this->assertEquals("rmc_replace() failure", $e->getMessage());
  }

  /**
   * No.57
   * No.
   */
  public function testAppendError()
  {
    print "\n***TEST*** ". get_class($this) ."::". __FUNCTION__ . "\n";
    try {
      $ret = $this->roma_client->append("CMD_ERROR", "bar", 0);
      $this->fail('append() test failure');
    } catch (Exception $e) {
    }
    $this->assertEquals("rmc_append() failure", $e->getMessage());
  }

  /**
   * No.58
   * No.
   */
  public function testPrependError()
  {
    print "\n***TEST*** ". get_class($this) ."::". __FUNCTION__ . "\n";
    try {
      $ret = $this->roma_client->prepend("CMD_ERROR", "bar", 0);
      $this->fail('prepend() test failure');
    } catch (Exception $e) {
    }
    $this->assertEquals("rmc_prepend() failure", $e->getMessage());
  }

  /**
   * No.59
   * No.
   */
  public function testCasError()
  {
    print "\n***TEST*** ". get_class($this) ."::". __FUNCTION__ . "\n";
    try {
      $ret = $this->roma_client->cas("CMD_ERROR", "bar", 0 ,0);
      $this->fail('cas() test failure');
    } catch (Exception $e) {
    }
    $this->assertEquals("rmc_cas() failure", $e->getMessage());
  }

  /**
   * No.60
   * No.
   */
  public function testIncrError()
  {
    print "\n***TEST*** ". get_class($this) ."::". __FUNCTION__ . "\n";
    try {
      $ret = $this->roma_client->incr("CMD_ERROR", 1);
      $this->fail('incr() test failure');
    } catch (Exception $e) {
    }
    $this->assertEquals("rmc_incr() failure", $e->getMessage());
  }

  /**
   * No.61
   * No.
   */
  public function testDecrError()
  {
    print "\n***TEST*** ". get_class($this) ."::". __FUNCTION__ . "\n";
    try {
      $ret = $this->roma_client->decr("CMD_ERROR", 1);
      $this->fail('decr() test failure');
    } catch (Exception $e) {
    }
    $this->assertEquals("rmc_decr() failure", $e->getMessage());
  }

  /**
   * No.62
   * No.
   */
  public function testCasUniqueError()
  {
    print "\n***TEST*** ". get_class($this) ."::". __FUNCTION__ . "\n";
    try {
      $ret = $this->roma_client->cas_unique("CMD_ERROR");
      $this->fail('cas_unique() test failure');
    } catch (Exception $e) {
    }
    $this->assertEquals("rmc_cas_unique() failure", $e->getMessage());
  }

  /**
   * No.63
   * No.
   */
  public function testAlistClearError()
  {
    print "\n***TEST*** ". get_class($this) ."::". __FUNCTION__ . "\n";
    try {
      $ret = $this->roma_client->alist_clear("CMD_ERROR");
      $this->fail('alist_clear() test failure');
    } catch (Exception $e) {
    }
    $this->assertEquals("rmc_alist_clear() failure", $e->getMessage());
  }

  /**
   * No.64
   * No.
   */
  public function testAlistLengthError()
  {
    print "\n***TEST*** ". get_class($this) ."::". __FUNCTION__ . "\n";
    try {
      $ret = $this->roma_client->alist_length("CMD_ERROR");
      $this->fail('alist_length() test failure');
    } catch (Exception $e) {
    }
    $this->assertEquals("rmc_alist_length() failure", $e->getMessage());
  }

  /**
   * No.65
   * No.
   */
  public function testAlistUpdateAtError()
  {
    print "\n***TEST*** ". get_class($this) ."::". __FUNCTION__ . "\n";
    try {
      $ret = $this->roma_client->alist_update_at("CMD_ERROR", 0, "bar");
      $this->fail('alist_update_at() test failure');
    } catch (Exception $e) {
    }
    $this->assertEquals("rmc_alist_update_at() failure", $e->getMessage());
  }

  /**
   * No.66
   * No.
   */
  public function testSetServerError()
  {
    print "\n***TEST*** ". get_class($this) ."::". __FUNCTION__ . "\n";
    try {
      $ret = $this->roma_client->set("CMD_SERVER_ERROR", "bar", 0);
      $this->fail('set() test failure');
    } catch (Exception $e) {
    }
    $this->assertEquals("rmc_set() failure", $e->getMessage());
  }

  /**
   * No.67
   * No.
   */
  public function testGetServerError()
  {
    print "\n***TEST*** ". get_class($this) ."::". __FUNCTION__ . "\n";
    try {
      $ret = $this->roma_client->get("CMD_SERVER_ERROR");
      $this->fail('get() test failure');
    } catch (Exception $e) {
    }
    $this->assertEquals("rmc_get() failure", $e->getMessage());
  }

  /**
   * No.68
   * No.
   */
  public function testAlistSizedInsertServerError()
  {
    print "\n***TEST*** ". get_class($this) ."::". __FUNCTION__ . "\n";
    try {
      $ret = $this->roma_client->alist_sized_insert("CMD_SERVER_ERROR", 10, "alist-value");
      $this->fail('alist_sized_insert() test failure');
    } catch (Exception $e) {
    }
    $this->assertEquals("rmc_alist_sized_insert() failure", $e->getMessage());
  }

  /**
   * No.69
   * No.
   */
  public function testAlistJoinServerError()
  {
    print "\n***TEST*** ". get_class($this) ."::". __FUNCTION__ . "\n";
    try {
      $ret = $this->roma_client->alist_join("CMD_SERVER_ERROR", ",");
      $this->fail('alist_join() test failure');
    } catch (Exception $e) {
    }
    $this->assertEquals("rmc_alist_join() failure", $e->getMessage());
  }

  /**
   * No.70
   * No.
   */
  public function testAlistDeleteServerError()
  {
    print "\n***TEST*** ". get_class($this) ."::". __FUNCTION__ . "\n";
    try {
      $ret = $this->roma_client->alist_delete("CMD_SERVER_ERROR", "alist-delete-value");
      $this->fail('alist_delete() test failure');
    } catch (Exception $e) {
    }
    $this->assertEquals("rmc_alist_delete() failure", $e->getMessage());
  }

  /**
   * No.71
   * No.
   */
  public function testAlistDeleteAtServerError()
  {
    print "\n***TEST*** ". get_class($this) ."::". __FUNCTION__ . "\n";
    try {
      $ret = $this->roma_client->alist_delete_at("CMD_SERVER_ERROR", 0);
      $this->fail('alist_delete_at() test failure');
    } catch (Exception $e) {
    }
    $this->assertEquals("rmc_alist_delete_at() failure", $e->getMessage());
  }

  /**
   * No.72
   * No.
   */
  public function testDeleteServerError()
  {
    print "\n***TEST*** ". get_class($this) ."::". __FUNCTION__ . "\n";
    try {
      $ret = $this->roma_client->delete("CMD_SERVER_ERROR", 0);
      $this->fail('delete() test failure');
    } catch (Exception $e) {
    }
    $this->assertEquals("rmc_delete() failure", $e->getMessage());
  }

  /**
   * No.73
   * No.
   */
  public function testAddServerError()
  {
    print "\n***TEST*** ". get_class($this) ."::". __FUNCTION__ . "\n";
    try {
      $ret = $this->roma_client->add("CMD_SERVER_ERROR", "bar", 0);
      $this->fail('add() test failure');
    } catch (Exception $e) {
    }
    $this->assertEquals("rmc_add() failure", $e->getMessage());
  }

  /**
   * No.74
   * No.
   */
  public function testReplaceServerError()
  {
    print "\n***TEST*** ". get_class($this) ."::". __FUNCTION__ . "\n";
    try {
      $ret = $this->roma_client->replace("CMD_SERVER_ERROR", "bar", 0);
      $this->fail('replace() test failure');
    } catch (Exception $e) {
    }
    $this->assertEquals("rmc_replace() failure", $e->getMessage());
  }

  /**
   * No.75
   * No.
   */
  public function testAppendServerError()
  {
    print "\n***TEST*** ". get_class($this) ."::". __FUNCTION__ . "\n";
    try {
      $ret = $this->roma_client->append("CMD_SERVER_ERROR", "bar", 0);
      $this->fail('append() test failure');
    } catch (Exception $e) {
    }
    $this->assertEquals("rmc_append() failure", $e->getMessage());
  }

  /**
   * No.76
   * No.
   */
  public function testPrependServerError()
  {
    print "\n***TEST*** ". get_class($this) ."::". __FUNCTION__ . "\n";
    try {
      $ret = $this->roma_client->prepend("CMD_SERVER_ERROR", "bar", 0);
      $this->fail('prepend() test failure');
    } catch (Exception $e) {
    }
    $this->assertEquals("rmc_prepend() failure", $e->getMessage());
  }

  /**
   * No.77
   * No.
   */
  public function testCasServerError()
  {
    print "\n***TEST*** ". get_class($this) ."::". __FUNCTION__ . "\n";
    try {
      $ret = $this->roma_client->cas("CMD_SERVER_ERROR", "bar", 0 ,0);
      $this->fail('cas() test failure');
    } catch (Exception $e) {
    }
    $this->assertEquals("rmc_cas() failure", $e->getMessage());
  }

  /**
   * No.78
   * No.
   */
  public function testIncrServerError()
  {
    print "\n***TEST*** ". get_class($this) ."::". __FUNCTION__ . "\n";
    try {
      $ret = $this->roma_client->incr("CMD_SERVER_ERROR", 1);
      $this->fail('incr() test failure');
    } catch (Exception $e) {
    }
    $this->assertEquals("rmc_incr() failure", $e->getMessage());
  }

  /**
   * No.79
   * No.
   */
  public function testDecrServerError()
  {
    print "\n***TEST*** ". get_class($this) ."::". __FUNCTION__ . "\n";
    try {
      $ret = $this->roma_client->decr("CMD_SERVER_ERROR", 1);
      $this->fail('decr() test failure');
    } catch (Exception $e) {
    }
    $this->assertEquals("rmc_decr() failure", $e->getMessage());
  }

  /**
   * No.80
   * No.
   */
  public function testCasUniqueServerError()
  {
    print "\n***TEST*** ". get_class($this) ."::". __FUNCTION__ . "\n";
    try {
      $ret = $this->roma_client->cas_unique("CMD_SERVER_ERROR");
      $this->fail('cas_unique() test failure');
    } catch (Exception $e) {
    }
    $this->assertEquals("rmc_cas_unique() failure", $e->getMessage());
  }

  /**
   * No.81
   * No.
   */
  public function testAlistClearServerError()
  {
    print "\n***TEST*** ". get_class($this) ."::". __FUNCTION__ . "\n";
    try {
      $ret = $this->roma_client->alist_clear("CMD_SERVER_ERROR");
      $this->fail('alist_clear() test failure');
    } catch (Exception $e) {
    }
    $this->assertEquals("rmc_alist_clear() failure", $e->getMessage());
  }

  /**
   * No.82
   * No.
   */
  public function testAlistLengthServerError()
  {
    print "\n***TEST*** ". get_class($this) ."::". __FUNCTION__ . "\n";
    try {
      $ret = $this->roma_client->alist_length("CMD_SERVER_ERROR");
      $this->fail('alist_length() test failure');
    } catch (Exception $e) {
    }
    $this->assertEquals("rmc_alist_length() failure", $e->getMessage());
  }

  /**
   * No.83
   * No.
   */
  public function testAlistUpdateAtServerError()
  {
    print "\n***TEST*** ". get_class($this) ."::". __FUNCTION__ . "\n";
    try {
      $ret = $this->roma_client->alist_update_at("CMD_SERVER_ERROR", 0, "bar");
      $this->fail('alist_update_at() test failure');
    } catch (Exception $e) {
    }
    $this->assertEquals("rmc_alist_update_at() failure", $e->getMessage());
  }
}
?>
